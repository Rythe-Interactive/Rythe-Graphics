///////////////////////
//  Texture Mapping  //
///////////////////////

#include <math_ext.shinc>

#if !defined(GEOMETRY_SHADER)
vec2 ParallaxMap(sampler2D normalHeightMap, float scale, vec2 uv, Camera camera, mat3 tbn, out float height)
{
#if defined(NO_HEIGHTMAP)
	height = 0;
	return uv;
#else
	if(scale <= epsilon)
		return uv;

	vec3 tangentViewDir = tbn * normalize(camera.toView);

	const float minLayers = 8.0;
	float distScale = 1.0 - clamp01(length(camera.toView) / 500.0);
	distScale = 1.0 - (distScale * distScale);
	float maxLayers = mix(64.0, 8.0, distScale);
	float layerCount = mix(minLayers, maxLayers, abs(dot(vec3(0.0, 0.0, 1.0), tangentViewDir)));

	float layerDepth = 1.0 / layerCount;

	float currentLayerDepth = 0.0;
	float prevLayerDepth = 0.0;

	vec2 P = (tangentViewDir.xy / max(tangentViewDir.z, 1.0)) * scale * vec2(-0.1, 0.1);
	vec2 deltaUV = P / layerCount;

	vec2 currentUV = uv;
	vec2 prevUV = currentUV;
#if defined(HEIGHT_MAP_R)
	float currentDepthMapValue = max(texture(normalHeightMap, currentUV).r, epsilon);
#else
	float currentDepthMapValue = max(texture(normalHeightMap, currentUV).a, epsilon);
#endif
	height = currentDepthMapValue;
	float prevDepthMapValue = currentDepthMapValue;

	while(currentLayerDepth < currentDepthMapValue)
	{
		prevUV = currentUV;
		currentUV -= deltaUV;

		prevDepthMapValue = currentDepthMapValue;
#if defined(HEIGHT_MAP_R)
		float currentDepthMapValue = max(texture(normalHeightMap, currentUV).r, epsilon);
#else
		float currentDepthMapValue = max(texture(normalHeightMap, currentUV).a, epsilon);
#endif

		prevLayerDepth = currentLayerDepth;
		currentLayerDepth += layerDepth;
	}

	float afterDepth = currentDepthMapValue - currentLayerDepth;
	float beforeDepth = prevDepthMapValue - prevLayerDepth;
	float weight = afterDepth / (afterDepth - beforeDepth);
	return mix(currentUV, prevUV, weight);
#endif
}

vec2 ParallaxMap(float height, float scale, vec2 uv, Camera camera, mat3 tbn)
{
	#if defined(NO_HEIGHTMAP)
	return uv;
	#else
	vec3 tangentViewDir = tbn * normalize(camera.toView);

	float offset = height * scale;
	vec2 parallexOffset = (tangentViewDir.xy / tangentViewDir.z) * offset * vec2(-0.1, 0.1);
    return uv - parallexOffset;
	#endif
}

#endif

vec3 NormalMap(sampler2D map, vec2 uv, mat3 tbn)
{
	return normalize(transpose(tbn) * normalize(texture(map, uv).xyz * 2.0 - 1.0));
}

vec4 AlbedoMap(sampler2D albedoMap, vec4 color, vec2 uv)
{
    return pow(texture(albedoMap, uv).rgba * color, vec4(vec3(2.2), 1.0));
}

vec4 LightingData(sampler2D MRDAoMap, vec2 uv)
{
	return texture(MRDAoMap, uv);
}

vec3 EmissiveMap(sampler2D emissiveMap, vec2 uv)
{
	return texture(emissiveMap, uv).rgb;
}
